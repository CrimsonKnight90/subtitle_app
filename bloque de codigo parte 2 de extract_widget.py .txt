# üîπ Deshabilitar botones mientras trabaja
        self.btn_pick.setEnabled(False)
        self.btn_extract.setEnabled(False)
        self.btn_config.setEnabled(False)
        self.btn_stop.setEnabled(True)  # üîπ habilitar bot√≥n de parada

        self.thread = QThread()
        self.worker = BatchWorker(self.selected_folder or Path.cwd(), selected_tracks=selected_tracks)
        self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.run)
        self.worker.progress.connect(self._progress_gui)
        self.worker.finished.connect(self._on_finished)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.thread.start()

    def _mostrar_manual(self):
        QMessageBox.information(
            self,
            self.t("manual_title"),
            self.t("manual_message")
        )

    def _cambiar_idioma(self, lang_code):
        S = get_settings()
        S.config["ui_language"] = lang_code
        save_config(S.config)

        self.t = get_translator()
        self.tree.set_ui_language(lang_code)
        self._apply_translations()

        # Avisamos a MainWindow para que reconstruya el men√∫ y cambie t√≠tulo
        self.request_menu_rebuild.emit()
        self.request_title_change.emit(self.t("app_title"))

        QMessageBox.information(
            self,
            self.t("interface_language"),
            f"{self.t('interface_language')} ‚Üí "
            f"{self.t({'es': 'spanish', 'en': 'english', 'fr': 'french'}[lang_code])}"
        )

    def _apply_translations(self):
        # Actualiza textos de la UI
        self.status_label.setText(self.t("ready_to_start"))

        self.btn_pick.setIcon(QIcon(str(self.icon_path / "folder.svg")))
        self.btn_pick.setText(self.t("select_folder"))

        self.btn_extract.setIcon(QIcon(str(self.icon_path / "extract.svg")))
        self.btn_extract.setText(self.t("extract_selected"))

        # üîπ Nuevo: traducir bot√≥n Parar
        self.btn_stop.setIcon(QIcon(str(self.icon_path / "stop.svg")))
        self.btn_stop.setText(self.t("stop"))

        self.btn_config.setIcon(QIcon(str(self.icon_path / "settings.svg")))
        self.btn_config.setText(self.t("settings"))

        self.info_icon_label.setPixmap(QIcon(str(self.icon_path / "idea.svg")).pixmap(20, 20))
        self.info_text_label.setText(self.t("videos_drag_hint"))

        self.tree.apply_translations()

    def _on_lang_changed(self, lang: str):
        S = get_settings()
        S.config["preferred_lang"] = lang
        save_config(S.config)
        self.log_area.append(f"üåê {self.t('preferred_language_saved')}: {lang}")

    # ------------------ Configuraci√≥n ------------------
    def open_settings_dialog(self):
        S = get_settings()
        dlg = QDialog(self)
        dlg.setWindowTitle(self.t("output_settings"))
        dlg.setWindowIcon(QIcon(str(self.icon_path / "settings.svg")))

        layout = QVBoxLayout(dlg)

        btn_style = """
            QPushButton {
                padding: 8px;
                text-align: left;
                font-size: 14px;
                border: 1px solid #444;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: rgba(30, 136, 229, 0.15);
            }
        """

        btn_default = QPushButton(QIcon(str(self.icon_path / "folder-subtitles.svg")), self.t("output_default"))
        btn_same = QPushButton(QIcon(str(self.icon_path / "folder-video.svg")), self.t("output_same"))
        btn_same_sub = QPushButton(QIcon(str(self.icon_path / "folder-subdir.svg")), self.t("output_same_sub"))
        btn_custom = QPushButton(QIcon(str(self.icon_path / "folder-custom.svg")), self.t("output_custom"))

        for btn in (btn_default, btn_same, btn_same_sub, btn_custom):
            btn.setStyleSheet(btn_style)
            btn.setIconSize(QSize(20, 20))
            layout.addWidget(btn)

        btn_default.clicked.connect(lambda: self._set_output_mode(S, "default", dlg))
        btn_same.clicked.connect(lambda: self._set_output_mode(S, "same", dlg))
        btn_same_sub.clicked.connect(lambda: self._set_same_subdir(S, dlg))
        btn_custom.clicked.connect(lambda: self._set_custom_folder(S, dlg))

        dlg.exec()

    def _set_output_mode(self, S, mode, dlg):
        S.config["output_mode"] = mode
        save_config(S.config)
        dlg.accept()

    def _set_same_subdir(self, S, dlg):
        name, ok = QInputDialog.getText(
            self,
            self.t("subfolder_name_title"),
            self.t("subfolder_name_prompt"),
            text=self.t("subfolder_name_default")
        )
        if ok and name.strip():
            S.config["output_mode"] = "same_subdir"
            S.config["same_subdir_name"] = name.strip()
            save_config(S.config)
            dlg.accept()

    def _set_custom_folder(self, S, dlg):
        folder = QFileDialog.getExistingDirectory(self, self.t("select_output_folder"))
        if folder:
            S.config["output_mode"] = "custom"
            S.config["custom_output_base"] = folder
            save_config(S.config)
            dlg.accept()

    def retranslate_ui(self):
        """Actualiza los textos del widget seg√∫n el idioma actual."""
        self.t = get_translator()
        self._apply_translations()
